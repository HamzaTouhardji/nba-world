{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSubmit","e","preventDefault","getPlayerId","console","log","state","playerName","handlechange","event","replace","target","value","split","join","length","setState","alert","axios","get","then","a","res","undefined","data","getPlayerStats","id","catch","err","playerId","playerStats","this","className","onSubmit","type","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAkFeA,E,kDA7Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAORC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,cACLC,QAAQC,IAAI,EAAKC,MAAMC,aAXP,EAclBC,aAAe,SAACC,GACd,IAAMC,EAAWD,EAAME,OAAOC,MAAMC,MAAM,KAAKC,KAAK,KAChDJ,EAAQK,OAAS,EACnB,EAAKC,SAAS,CAACT,WAAYG,IAE3BO,MAAM,6CAnBQ,EAwBlBd,YAAc,WACZe,IAAMC,IAAN,2DAA8D,EAAKb,MAAMC,aACxEa,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,8DAEqBE,IAArBD,EAAIE,KAAKA,KAAK,GAFd,2CAIOF,EAAIE,KAAKA,KAAKT,OAAS,GAJ9B,gBAKFE,MAAM,wBALJ,sCAOI,EAAKQ,eAAeH,EAAIE,KAAKA,KAAK,GAAGE,IAPzC,2CADN,uDAUGC,OAAM,SAAAC,GACPxB,QAAQC,IAAIuB,OApCE,EAwClBH,eAAiB,SAACI,GAChBX,IAAMC,IAAN,qFAAwFU,IACvFT,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,sDACJjB,QAAQC,IAAIiB,EAAIE,KAAKA,MACrB,EAAKR,SAAS,CAACc,YAAaR,EAAIE,KAAKA,KAAK,KAFtC,2CADN,uDAIGG,OAAM,SAAAC,GACPxB,QAAQC,IAAIuB,OA5Cd,EAAKtB,MAAM,CACTC,WAAY,KACZuB,YAAa,IAJC,E,gEAmDhBC,KAAK5B,gB,+BAIL,OACE,sBAAK6B,UAAU,MAAf,UACI,uBAAMC,SAAUF,KAAK/B,aAArB,UACE,wCAEE,uBAAOkC,KAAK,OAAOtB,MAAOmB,KAAKzB,MAAMM,MAAOuB,SAAUJ,KAAKvB,aAAc4B,YAAY,wBAEvF,uBAAOF,KAAK,SAAStB,MAAM,eANjC,qBAQoBmB,KAAKzB,MAAMwB,YAAX,aAChB,uBATJ,gCAUkCC,KAAKzB,MAAMwB,YAAX,IAC9B,uBAXJ,wBAY0BC,KAAKzB,MAAMwB,YAAX,IACtB,uBAbJ,wBAc0BC,KAAKzB,MAAMwB,YAAX,W,GAvEdO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9268d812.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      playerName: null,\n      playerStats: {}\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.getPlayerId()\n    console.log(this.state.playerName)\n  }\n\n  handlechange = (event) => {\n    const replace =  event.target.value.split(\" \").join(\"_\");\n    if (replace.length > 0) {\n      this.setState({playerName: replace})\n    } else {\n      alert(\"ATTENTION! Le nom du joueur est invalide\")\n    }\n  } \n\n\n  getPlayerId = () => {\n    axios.get(`https://www.balldontlie.io/api/v1/players?search=${this.state.playerName}`)\n    .then(async res => {\n      //console.log(res.data.data)\n      if (res.data.data[0] === undefined) {\n        //alert(\"ATTENTION! Ce joueur n'a pas encore jouer\")\n      } else if (res.data.data.length > 1) {\n        alert(\"Le nom est incomplet\")\n      }else{\n        await this.getPlayerStats(res.data.data[0].id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  getPlayerStats = (playerId) => {\n    axios.get(`https://www.balldontlie.io/api/v1/season_averages?season=2020&player_ids[]=${playerId}`)\n    .then(async res => {\n      console.log(res.data.data)\n      this.setState({playerStats: res.data.data[0]})\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  componentDidMount(){\n    this.getPlayerId()\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Nom\n              <input type=\"text\" value={this.state.value} onChange={this.handlechange} placeholder=\"Le nom du joueur\"/>\n            </label>\n            <input type=\"submit\" value=\"Valider\"/>\n          </form>\n          Matchs jou√©s : {this.state.playerStats[\"games_played\"]}\n          <br />\n          Moyenne de point par match : {this.state.playerStats[\"pts\"]}\n          <br />\n          Moyenne de rebonds : {this.state.playerStats[\"reb\"]}\n          <br />\n          Moyenne d'assistes : {this.state.playerStats[\"ast\"]}\n          </div>\n    )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}